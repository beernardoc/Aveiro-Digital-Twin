{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PythonShell = exports.NewlineTransformer = exports.PythonShellErrorWithLogs = exports.PythonShellError = void 0;\nconst events_1 = require(\"events\");\nconst child_process_1 = require(\"child_process\");\nconst os_1 = require(\"os\");\nconst path_1 = require(\"path\");\nconst stream_1 = require(\"stream\");\nconst fs_1 = require(\"fs\");\nconst util_1 = require(\"util\");\nfunction toArray(source) {\n  if (typeof source === 'undefined' || source === null) {\n    return [];\n  } else if (!Array.isArray(source)) {\n    return [source];\n  }\n  return source;\n}\n/**\r\n * adds arguments as properties to obj\r\n */\nfunction extend(obj, ...args) {\n  Array.prototype.slice.call(arguments, 1).forEach(function (source) {\n    if (source) {\n      for (let key in source) {\n        obj[key] = source[key];\n      }\n    }\n  });\n  return obj;\n}\n/**\r\n * gets a random int from 0-10000000000\r\n */\nfunction getRandomInt() {\n  return Math.floor(Math.random() * 10000000000);\n}\nconst execPromise = (0, util_1.promisify)(child_process_1.exec);\nclass PythonShellError extends Error {}\nexports.PythonShellError = PythonShellError;\nclass PythonShellErrorWithLogs extends PythonShellError {}\nexports.PythonShellErrorWithLogs = PythonShellErrorWithLogs;\n/**\r\n * Takes in a string stream and emits batches seperated by newlines\r\n */\nclass NewlineTransformer extends stream_1.Transform {\n  _transform(chunk, encoding, callback) {\n    let data = chunk.toString();\n    if (this._lastLineData) data = this._lastLineData + data;\n    const lines = data.split(os_1.EOL);\n    this._lastLineData = lines.pop();\n    //@ts-ignore this works, node ignores the encoding if it's a number\n    lines.forEach(this.push.bind(this));\n    callback();\n  }\n  _flush(done) {\n    if (this._lastLineData) this.push(this._lastLineData);\n    this._lastLineData = null;\n    done();\n  }\n}\nexports.NewlineTransformer = NewlineTransformer;\n/**\r\n * An interactive Python shell exchanging data through stdio\r\n * @param {string} script    The python script to execute\r\n * @param {object} [options] The launch options (also passed to child_process.spawn)\r\n * @param [stdoutSplitter] Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n * @param [stderrSplitter] Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n * @constructor\r\n */\nclass PythonShell extends events_1.EventEmitter {\n  /**\r\n   * spawns a python process\r\n   * @param scriptPath path to script. Relative to current directory or options.scriptFolder if specified\r\n   * @param options\r\n   * @param stdoutSplitter Optional. Splits stdout into chunks, defaulting to splitting into newline-seperated lines\r\n   * @param stderrSplitter Optional. splits stderr into chunks, defaulting to splitting into newline-seperated lines\r\n   */\n  constructor(scriptPath, options, stdoutSplitter = null, stderrSplitter = null) {\n    super();\n    /**\r\n     * returns either pythonshell func (if val string) or custom func (if val Function)\r\n     */\n    function resolve(type, val) {\n      if (typeof val === 'string') {\n        // use a built-in function using its name\n        return PythonShell[type][val];\n      } else if (typeof val === 'function') {\n        // use a custom function\n        return val;\n      }\n    }\n    if (scriptPath.trim().length == 0) throw Error(\"scriptPath cannot be empty! You must give a script for python to run\");\n    let self = this;\n    let errorData = '';\n    events_1.EventEmitter.call(this);\n    options = extend({}, PythonShell.defaultOptions, options);\n    let pythonPath;\n    if (!options.pythonPath) {\n      pythonPath = PythonShell.defaultPythonPath;\n    } else pythonPath = options.pythonPath;\n    let pythonOptions = toArray(options.pythonOptions);\n    let scriptArgs = toArray(options.args);\n    this.scriptPath = (0, path_1.join)(options.scriptPath || '', scriptPath);\n    this.command = pythonOptions.concat(this.scriptPath, scriptArgs);\n    this.mode = options.mode || 'text';\n    this.formatter = resolve('format', options.formatter || this.mode);\n    this.parser = resolve('parse', options.parser || this.mode);\n    // We don't expect users to ever format stderr as JSON so we default to text mode\n    this.stderrParser = resolve('parse', options.stderrParser || 'text');\n    this.terminated = false;\n    this.childProcess = (0, child_process_1.spawn)(pythonPath, this.command, options);\n    ['stdout', 'stdin', 'stderr'].forEach(function (name) {\n      self[name] = self.childProcess[name];\n      self.parser && self[name] && self[name].setEncoding(options.encoding || 'utf8');\n    });\n    // Node buffers stdout&stderr in batches regardless of newline placement\n    // This is troublesome if you want to recieve distinct individual messages\n    // for example JSON parsing breaks if it recieves partial JSON\n    // so we use newlineTransformer to emit each batch seperated by newline\n    if (this.parser && this.stdout) {\n      if (!stdoutSplitter) stdoutSplitter = new NewlineTransformer();\n      // note that setting the encoding turns the chunk into a string\n      stdoutSplitter.setEncoding(options.encoding || 'utf8');\n      this.stdout.pipe(stdoutSplitter).on('data', chunk => {\n        this.emit('message', self.parser(chunk));\n      });\n    }\n    // listen to stderr and emit errors for incoming data\n    if (this.stderrParser && this.stderr) {\n      if (!stderrSplitter) stderrSplitter = new NewlineTransformer();\n      // note that setting the encoding turns the chunk into a string\n      stderrSplitter.setEncoding(options.encoding || 'utf8');\n      this.stderr.pipe(stderrSplitter).on('data', chunk => {\n        this.emit('stderr', self.stderrParser(chunk));\n      });\n    }\n    if (this.stderr) {\n      this.stderr.on('data', function (data) {\n        errorData += '' + data;\n      });\n      this.stderr.on('end', function () {\n        self.stderrHasEnded = true;\n        terminateIfNeeded();\n      });\n    } else {\n      self.stderrHasEnded = true;\n    }\n    if (this.stdout) {\n      this.stdout.on('end', function () {\n        self.stdoutHasEnded = true;\n        terminateIfNeeded();\n      });\n    } else {\n      self.stdoutHasEnded = true;\n    }\n    this.childProcess.on('error', function (err) {\n      self.emit('error', err);\n    });\n    this.childProcess.on('exit', function (code, signal) {\n      self.exitCode = code;\n      self.exitSignal = signal;\n      terminateIfNeeded();\n    });\n    function terminateIfNeeded() {\n      if (!self.stderrHasEnded || !self.stdoutHasEnded || self.exitCode == null && self.exitSignal == null) return;\n      let err;\n      if (self.exitCode && self.exitCode !== 0) {\n        if (errorData) {\n          err = self.parseError(errorData);\n        } else {\n          err = new PythonShellError('process exited with code ' + self.exitCode);\n        }\n        err = extend(err, {\n          executable: pythonPath,\n          options: pythonOptions.length ? pythonOptions : null,\n          script: self.scriptPath,\n          args: scriptArgs.length ? scriptArgs : null,\n          exitCode: self.exitCode\n        });\n        // do not emit error if only a callback is used\n        if (self.listeners('pythonError').length || !self._endCallback) {\n          self.emit('pythonError', err);\n        }\n      }\n      self.terminated = true;\n      self.emit('close');\n      self._endCallback && self._endCallback(err, self.exitCode, self.exitSignal);\n    }\n    ;\n  }\n  /**\r\n   * checks syntax without executing code\r\n   * @returns rejects promise w/ string error output if syntax failure\r\n   */\n  static checkSyntax(code) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const randomInt = getRandomInt();\n      const filePath = (0, os_1.tmpdir)() + path_1.sep + `pythonShellSyntaxCheck${randomInt}.py`;\n      const writeFilePromise = (0, util_1.promisify)(fs_1.writeFile);\n      return writeFilePromise(filePath, code).then(() => {\n        return this.checkSyntaxFile(filePath);\n      });\n    });\n  }\n  static getPythonPath() {\n    return this.defaultOptions.pythonPath ? this.defaultOptions.pythonPath : this.defaultPythonPath;\n  }\n  /**\r\n   * checks syntax without executing code\r\n   * @returns {Promise} rejects w/ stderr if syntax failure\r\n   */\n  static checkSyntaxFile(filePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pythonPath = this.getPythonPath();\n      let compileCommand = `${pythonPath} -m py_compile ${filePath}`;\n      return execPromise(compileCommand);\n    });\n  }\n  /**\r\n   * Runs a Python script and returns collected messages as a promise.\r\n   * If the promise is rejected, the err will probably be of type PythonShellErrorWithLogs\r\n   * @param scriptPath   The path to the script to execute\r\n   * @param options  The execution options\r\n   */\n  static run(scriptPath, options) {\n    return new Promise((resolve, reject) => {\n      let pyshell = new PythonShell(scriptPath, options);\n      let output = [];\n      pyshell.on('message', function (message) {\n        output.push(message);\n      }).end(function (err) {\n        if (err) {\n          err.logs = output;\n          reject(err);\n        } else resolve(output);\n      });\n    });\n  }\n  /**\r\n   * Runs the inputted string of python code and returns collected messages as a promise. DO NOT ALLOW UNTRUSTED USER INPUT HERE!\r\n   * @param code   The python code to execute\r\n   * @param options  The execution options\r\n   * @return a promise with the output from the python script\r\n   */\n  static runString(code, options) {\n    // put code in temp file\n    const randomInt = getRandomInt();\n    const filePath = os_1.tmpdir + path_1.sep + `pythonShellFile${randomInt}.py`;\n    (0, fs_1.writeFileSync)(filePath, code);\n    return PythonShell.run(filePath, options);\n  }\n  static getVersion(pythonPath) {\n    if (!pythonPath) pythonPath = this.getPythonPath();\n    return execPromise(pythonPath + \" --version\");\n  }\n  static getVersionSync(pythonPath) {\n    if (!pythonPath) pythonPath = this.getPythonPath();\n    return (0, child_process_1.execSync)(pythonPath + \" --version\").toString();\n  }\n  /**\r\n   * Parses an error thrown from the Python process through stderr\r\n   * @param  {string|Buffer} data The stderr contents to parse\r\n   * @return {Error} The parsed error with extended stack trace when traceback is available\r\n   */\n  parseError(data) {\n    let text = '' + data;\n    let error;\n    if (/^Traceback/.test(text)) {\n      // traceback data is available\n      let lines = text.trim().split(os_1.EOL);\n      let exception = lines.pop();\n      error = new PythonShellError(exception);\n      error.traceback = data;\n      // extend stack trace\n      error.stack += os_1.EOL + '    ----- Python Traceback -----' + os_1.EOL + '  ';\n      error.stack += lines.slice(1).join(os_1.EOL + '  ');\n    } else {\n      // otherwise, create a simpler error with stderr contents\n      error = new PythonShellError(text);\n    }\n    return error;\n  }\n  /**\r\n   * Sends a message to the Python shell through stdin\r\n   * Override this method to format data to be sent to the Python process\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  send(message) {\n    if (!this.stdin) throw new Error(\"stdin not open for writing\");\n    let data = this.formatter ? this.formatter(message) : message;\n    if (this.mode !== 'binary') data += os_1.EOL;\n    this.stdin.write(data);\n    return this;\n  }\n  /**\r\n   * Closes the stdin stream. Unless python is listening for stdin in a loop\r\n   * this should cause the process to finish its work and close.\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  end(callback) {\n    if (this.childProcess.stdin) {\n      this.childProcess.stdin.end();\n    }\n    this._endCallback = callback;\n    return this;\n  }\n  /**\r\n   * Sends a kill signal to the process\r\n   * @returns {PythonShell} The same instance for chaining calls\r\n   */\n  kill(signal) {\n    this.terminated = this.childProcess.kill(signal);\n    return this;\n  }\n  /**\r\n   * Alias for kill.\r\n   * @deprecated\r\n   */\n  terminate(signal) {\n    // todo: remove this next breaking release\n    return this.kill(signal);\n  }\n}\nexports.PythonShell = PythonShell;\n// starting 2020 python2 is deprecated so we choose 3 as default\nPythonShell.defaultPythonPath = process.platform != \"win32\" ? \"python3\" : \"python\";\nPythonShell.defaultOptions = {}; //allow global overrides for options\n// built-in formatters\nPythonShell.format = {\n  text: function toText(data) {\n    if (!data) return '';else if (typeof data !== 'string') return data.toString();\n    return data;\n  },\n  json: function toJson(data) {\n    return JSON.stringify(data);\n  }\n};\n//built-in parsers\nPythonShell.parse = {\n  text: function asText(data) {\n    return data;\n  },\n  json: function asJson(data) {\n    return JSON.parse(data);\n  }\n};\n;","map":{"version":3,"names":["events_1","require","child_process_1","os_1","path_1","stream_1","fs_1","util_1","toArray","source","Array","isArray","extend","obj","args","prototype","slice","call","arguments","forEach","key","getRandomInt","Math","floor","random","execPromise","promisify","exec","PythonShellError","Error","exports","PythonShellErrorWithLogs","NewlineTransformer","Transform","_transform","chunk","encoding","callback","data","toString","_lastLineData","lines","split","EOL","pop","push","bind","_flush","done","PythonShell","EventEmitter","constructor","scriptPath","options","stdoutSplitter","stderrSplitter","resolve","type","val","trim","length","self","errorData","defaultOptions","pythonPath","defaultPythonPath","pythonOptions","scriptArgs","join","command","concat","mode","formatter","parser","stderrParser","terminated","childProcess","spawn","name","setEncoding","stdout","pipe","on","emit","stderr","stderrHasEnded","terminateIfNeeded","stdoutHasEnded","err","code","signal","exitCode","exitSignal","parseError","executable","script","listeners","_endCallback","checkSyntax","randomInt","filePath","tmpdir","sep","writeFilePromise","writeFile","then","checkSyntaxFile","getPythonPath","compileCommand","run","Promise","reject","pyshell","output","message","end","logs","runString","writeFileSync","getVersion","getVersionSync","execSync","text","error","test","exception","traceback","stack","send","stdin","write","kill","terminate","process","platform","format","toText","json","toJson","JSON","stringify","parse","asText","asJson"],"sources":["index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}